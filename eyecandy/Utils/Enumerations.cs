
namespace eyecandy;

/// <summary>
/// Indicates which audio FFT frequency calculation is needed, if any.
/// </summary>
public enum FrequencyAlgorithm
{
    /// <summary>
    /// Do not calculate audio frequency data.
    /// </summary>
    NotApplicable = 0,
    
    /// <summary>
    /// Calculate frequency magnitude.
    /// </summary>
    Magnitude = 1,
    
    /// <summary>
    /// Calculate frequency decibels.
    /// </summary>
    Decibels = 2,

    /// <summary>
    /// Calculate frequency decibels the WebAudio API way (smoothed, with a
    /// 70dB window between -30dB and -100dB, and scaled 0 to 255)
    /// </summary>
    WebAudioDecibels = 3,

    /// <summary>
    /// Calcualte all frequency representations.
    /// </summary>
    All = 999
}

/// <summary>
/// Indicates which audio volume calculation is needed, if any.
/// </summary>
public enum VolumeAlgorithm
{
    /// <summary>
    /// Do not calculate audio volume data.
    /// </summary>
    NotApplicable = 0,

    /// <summary>
    /// Calculate audio using the Root Mean Squared algorithm. The calculation
    /// window is controlled by the RMSVolumeMilliseconds property in the capture
    /// configuration object. The default is 300ms.
    /// </summary>
    RMS = 1,

    /// <summary>
    /// Calculate all volume representations.
    /// </summary>
    All = 999
}

/// <summary>
/// Determines how loopback audio is processed.
/// </summary>
public enum LoopbackApi
{
    /// <summary>
    /// WindowsInternal is WASAPI loopback provided by NAudio.
    /// </summary>
    WindowsInternal = 0,

    /// <summary>
    /// OpenAL-Soft works on Windows or Linux but requires external loopback support
    /// (a driver on Windows, or manual configuration on Linux such as PulseAudio).
    /// </summary>
    OpenALSoft = 1,

    /// <summary>
    /// SyntheticData generates audio samples. Can be a primary "audio" source, but
    /// more commonly used as a data source during periods of silence from other
    /// capture audio sources.
    /// </summary>
    SyntheticData = 3,
}

/// <summary>
/// Determines the type of wave audio generated by the SynthetidData capture source.
/// </summary>
public enum SyntheticDataAlgorithm
{
    /// <summary>
    /// Simple repeating sine wave
    /// </summary>
    MetronomeBeat = 0,
}

/// <summary>
/// Determines how OpenGL error logging works. Does not affect other logging.
/// </summary>
public enum OpenGLErrorLogFlags
{
    /// <summary>
    /// For some drivers, this may provide the best performance but
    /// some errors or detailed error messages may be suppressed.
    /// </summary>
    Normal = 0,
    
    /// <summary>
    /// For some drivers, this may provide more detailed information,
    /// possibly with a slight performance cost (driver-dependent).
    /// </summary>
    DebugContext = 1,

    /// <summary>
    /// Outputs minimal error information. Because OpenGL errors can
    /// occur at high rates (one per frame), this can be useful during
    /// troubleshooting when the errors "drown out" other log data.
    /// </summary>
    LowDetail = 2,

    /// <summary>
    /// Disables all OpenGL error logging.
    /// </summary>
    Disabled = 3,
}
